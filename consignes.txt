CONSIGNE :
    - Utiliser l'exemple W3.CSS "The Band" comme modèle de notre nouvelle application web, nommée "SymfonyEcommerce" : ***
		https://www.w3schools.com/w3css/tryw3css_templates_band.htm
    - Utiliser le terminal afin de pouvoir créer un nouveau projet Symfony en utilisant la commande indiquée dans le cours. ***
    - Modifier le fichier .env de l'application, en indiquant l'adresse de connection et les identifiants du server MySQL. ***
    - Utiliser la commande du terminal pour créer une nouvelle base de données nommée SymfonyEcommerce. ***
    - Créer un nouveau Controller nommé IndexController (via le terminal). ***
    - Modifier le fichier Twig index.html.twig, de manière à ce que celui-ci accueille le code source de la page template, moins les images. ***
    - Implémenter le fichier W3.CSS dans notre application, dans un dossier css dans un dossier asset, afin que la mise en page du site soit appliquée. ***
    - Dans le cadre de l'implémentation, faire en sorte que index.html.twig ne conserve que la thématique d'accueil (id="band"), héritant de base.html.twig qui conserve la structure de base de la page web ainsi que la prise en charge du fichier CSS. *** 
    - Placer le header et le footer dans des pages Twig à part, dans un dossier créé, intitulé layout. ***
    - Retirer le slideshow et la photo du bas de la structure de notre page web. ***

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
	- Dans notre header, nous avons un bouton de type menu déroulant, intitulé "CATEGORIES". En réutilisant le code de notre projet actuel et du projet précédent, faire en sorte que le menu déroulant CATEGORIES propose la liste des différentes catégories enregistrées dans notre base de données lorsque le bouton est survolé. L'affichage des catégories existantes doit être dynamique (suite à la récupération des catégories sur notre base de données et non pas écrit en dur).
    - Créer, dans IndexController, une nouvelle méthode de classe, nommée indexCategory(), route index_category, laquelle affichera tous les Products sur notre page lié à la Category sélectionnée en question.
    - Créer un lien hypertexte sur chaque catégorie du menu déroulant CATEGORIES, lequel mènera vers la route index_category, en renseignant quelle catégorie est celle qui sera liée aux Products qui seront présentés.

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE:
	- Créer, dans notre IndexController, une nouvelle méthode de classe nommée displayProduct(). Cette méthode displayProduct() fait appel à un fichier Twig particulier que vous allez créer, le fichier product_display.html.twig, lequel servira à présenter les diverses caractéristiques d'un Product donné, désigné par le paramètre de route.
    - Cette page product_display nous présente donc plusieurs éléments:
    	-> Le nom du Product
        -> Sa Category
        -> Les Tags qui lui sont associés
        -> La Vignette (thumbnail) qui lui est associée
        -> Sa description
        -> Le stock disponible
        -> Le prix du Product
        -> Un bouton "Acheter", lequel n'a aucun effet
    - En ce qui concerne l'affichage des Tags sur la fiche Produit, insérer un lien hypertexte menant vers notre méthode indexTag(), de manière à ce que cliquer sur un Tag en question nous présente la liste de tous les Products liés au Tag.
    - Créer pour chaque vignette de notre grille sur index(), indexTag() et indexCategory(), un lien hypertexte menant à notre méthode displayProduct() en renseignant l'ID du Product concerné

// ----------------------------------------------------------------------------------------------------------------

 CONSIGNE :
	- Créer, dans IndexController, une nouvelle méthode de Controller nommée buyProduct(). La méthode buyProduct(), en utilisant l'indication du Product qui lui a fourni, retranchera de 1 la valeur du stock du Product UNIQUEMENT si ce dernier est supérieur à 0, avant de renvoyer l'Utilisateur vers la fiche Product qu'il était en train de consulter.
    - Si la valeur du $stock du Product concerné est égale à 0 (ou moins), le bouton d'Achat ne doit pas être visible aux yeux de l'Utilisateur.

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
    En reprenant l'exemple de SymfonyBlog :
    - Créer le fichier twig dataform au sein du dossier "index" de templates afin de fournir une page twig pour notre méthode createProduct() au sein de AdminController.
    - Créer la méthode deleteProduct() dans AdminController, laquelle supprime un Product au sein de notre base de données.
    - Créer la méthode deleteTag() dans AdminController, laquelle supprime un Tag au sein de notre base de données.

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
	- Créer, dans notre AdminController, une nouvelle méthode de Controller nommée reloadCatalog() ('/catalog/reload', name: 'admin_reload'), laquelle sera une route faisant le travail des Fixtures sans que nous ayons à passer par le terminal. Cette route sera liée à un bouton rouge "Réinitialiser Catalogue" présent sur notre page Backoffice.
    - Par "travail des Fixtures", nous entendons:
    	- Vider le contenu des tables Category, Product, et Tag
        - Créer une sélection de 150 Products à l'image de ProductsFixtures
        - Créer les Tags liés et les lier aléatoirement aux instances de Product avant de les persister
        - Créer les Categories liées et les lier selon le nom du Product avant de les persister

// ---------------------------------------------------------------------------------------------------------------- 

CONSIGNE :
	- Dans OrderController:
    	- Modifier pour la méthode orderDashboard le fichier dashboard.html.twig de manière à ce que ce dernier présente la liste des entrées de Reservation liées à chaque commande.
        - Créer une méthode de classe deleteReservation(), supprimant une Reservation
        - Créer une méthode de classe deleteOrder(), laquelle supprime une commande APRES avoir supprimé toutes les Reservation liées
        - Créer une méthode validateOrder(), laquelle change le statut de la commande actuelle de "panier" à "validée"
        - Créer trois boutons pour chaque méthode dans dashboard.html.twig
        
        Correction après pause: 11h

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
	- Aller dans le Backoffice Administrateur, et effectuer une réinitialisation des Products et des différentes Entities (cliquer sur le bouton rouge)
	- Faire en sorte dans notre méthode productDisplay(), qu'à chaque nouvelle commande (Order) occasionnée par une Reservation, l'Utilisateur connecté soit lié à la commande via relations entre Entity.
    - Faire en sorte qu'il soit impossible pour un utilisateur non connecté de passer une commande.

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
	- Relisez et assimilez la logique de OrderController.
    - OrderController pour l'instant permet à tout utilisateur de valider, modifier ou supprimer n'importe quelle commande tant que son ID est renseigné. Modifier nos méthodes deleteOrder(), deleteReservation(), et validateOrder() de manière à ce que seul un User lié à la commande soit capable de supprimer ou valider les commandes via ces méthodes.

// ----------------------------------------------------------------------------------------------------------------

CONSIGNE :
	- Selon l'exemple de Flashbag qui a été écrit dans la méthode displayProduct() de notre IndexController, utiliser les Flashbags pour afficher un message indiquant à l'Utilisateur :
    	- sa réservation a bien été effectuée (en vert) ;
        - un message indiquant à l'Utilisateur que le stock requis par sa réservation n'est pas disponible (en jaune) suivi d'un second flash indiquant le nombre d'unités contenues dans sa réservation.
    - Dans OrderController: 
    	- Un message vert si la commande a bien été validée ;
        - Un message jaune si une réservation ou une commande a bien été supprimée ;
        - Un message rouge si vous essayez d'interagir (supprimer ou valider) une commande qui n'est pas la vôtre.

// ----------------------------------------------------------------------------------------------------------------